// Copyright 2016 The go-ethereum Authors
// This file is part of the go-ethereum library.
//
// The go-ethereum library is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// The go-ethereum library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with the go-ethereum library. If not, see <http://www.gnu.org/licenses/>.

// Package les implements the Light Ethereum Subprotocol.
package les

import (
	"errors"
	"math/big"
	"sync/atomic"
	"time"

	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/contracts/registrar"
	"github.com/ethereum/go-ethereum/contracts/registrar/contract"
	"github.com/ethereum/go-ethereum/core"
	"github.com/ethereum/go-ethereum/core/rawdb"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/crypto"
	"github.com/ethereum/go-ethereum/ethdb"
	"github.com/ethereum/go-ethereum/event"
	"github.com/ethereum/go-ethereum/light"
	"github.com/ethereum/go-ethereum/log"
	"github.com/ethereum/go-ethereum/params"
)

// Backend wraps all needed functions for registrar.
type Backend interface {
	SubscribeChainHeadEvent(ch chan<- core.ChainHeadEvent) event.Subscription
}

// RegistrarConfig is the configuration parameters of registrar.
type RegistrarConfig struct {
	// CheckpointSize is the block frequency for creating a checkpoint.
	CheckpointSize uint64

	// ProcessConfirms is the number of confirmations before a checkpoint is generated.
	ProcessConfirms uint64

	// FreezeThreshold is the number of confirmations before a checkpoint is regarded
	// as stable.
	FreezeThreshold uint64
}

// defaultConfig contains default settings for use on the Ethereum main net or test net.
var defaultConfig = &RegistrarConfig{
	CheckpointSize:  params.CheckpointFrequency,
	ProcessConfirms: params.CheckpointProcessConfirmations,
	FreezeThreshold: params.FreezeThreshold,
}

// checkpointRegistrar is responsible for updating the stable checkpoint
// which generated by local and announced by contract admins in the server
// side and verifying advertised checkpoint during the checkpoint syncing
// in the client side.
type checkpointRegistrar struct {
	config        *RegistrarConfig     // configuration for registrar.
	indexerConfig *light.IndexerConfig // configuration for indexer parameters.

	lightMode bool // Whether the local node is les server or light client.
	genesis   common.Hash
	chaindb   ethdb.Database
	contract  *registrar.Registrar
	backend   Backend
	exitCh    chan struct{}

	contractAddr common.Address   // address of checkpoint contract.
	signers      []common.Address // a set of trusted checkpoint signers.

	// Indexers
	bloomTrieIndexer *core.ChainIndexer
	chtIndexer       *core.ChainIndexer

	// Whether the contract backend is set.
	running int32

	// Test Hooks
	SyncDoneHook func() // Function used to notify that light syncing has completed.
}

// newCheckpointRegistrar returns a checkpoint registrar handler.
func newCheckpointRegistrar(chaindb ethdb.Database, backend Backend, config *RegistrarConfig, indexerConfig *light.IndexerConfig, chtIndexer *core.ChainIndexer, bloomTrieIndexer *core.ChainIndexer, genesis common.Hash, lightMode bool, exitCh chan struct{}) *checkpointRegistrar {
	// Load default contract address and relative signers according to genesis hash
	r, ok := registrar.Registrars[genesis]
	if !ok {
		log.Info("Checkpoint registrar is not enabled")
		return nil
	}
	log.Info("Setup registrar", "contract", r.ContractAddr, "numsigner", len(r.Signers))
	reg := &checkpointRegistrar{
		config:           config,
		indexerConfig:    indexerConfig,
		genesis:          genesis,
		backend:          backend,
		bloomTrieIndexer: bloomTrieIndexer,
		chtIndexer:       chtIndexer,
		lightMode:        lightMode,
		contractAddr:     r.ContractAddr,
		signers:          r.Signers,
		chaindb:          chaindb,
		exitCh:           exitCh,
	}
	return reg
}

// start binds the registrar contract and start listening to the
// newCheckpointEvent for the server side.
func (reg *checkpointRegistrar) start(backend bind.ContractBackend) {
	contract, err := registrar.NewRegistrar(reg.contractAddr, backend)
	if err != nil {
		log.Info("Bind registrar contract failed", "err", err)
		return
	}
	if !atomic.CompareAndSwapInt32(&reg.running, 0, 1) {
		log.Info("Already bound and listening to registrar contract")
		return
	}
	reg.contract = contract
	if !reg.lightMode {
		go reg.checkpointLoop(reg.recoverCheckpoint())
	}
}

// isRunning returns an indicator whether the registrar is running.
func (reg *checkpointRegistrar) isRunning() bool {
	return atomic.LoadInt32(&reg.running) == 1
}

// checkpointLoop is a standalone goroutine to watch new checkpoint
// events and updates local's stable checkpoint.
func (reg *checkpointRegistrar) checkpointLoop(checkpoint *light.TrustedCheckpoint) (err error) {
	type announce struct {
		hash common.Hash
	}

	var (
		eventCh       = make(chan *contract.ContractNewCheckpointEvent)
		headCh        = make(chan core.ChainHeadEvent, SubscribeChainHeadEvent)
		announcements = make(map[uint64]announce)
	)
	eventSub, err := reg.contract.WatchNewCheckpointEvent(eventCh)
	if err != nil {
		return err
	}
	headSub := reg.backend.SubscribeChainHeadEvent(headCh)
	if headSub == nil {
		eventSub.Unsubscribe()
		return errors.New("subscribe head event failed")
	}

	ticker := time.NewTicker(5 * time.Minute)
	defer func() {
		eventSub.Unsubscribe()
		headSub.Unsubscribe()
		ticker.Stop()
	}()

	for {
		select {
		case event := <-eventCh:
			if event == nil {
				log.Warn("Ignore empty checkpoint event")
				continue
			}
			// Note several events have same index may be received because of
			// (1) chain reorg and (2) the modification of the latest checkpoint.
			//
			// It's worth noting that there are a lot of reorg in the blockchain,
			// the log events received here could be a normal event or a logRemovedEvent.
			// In theory, all state-related data should be stored in association with
			// the block hash.
			//
			// However, in order to simplify the situation, the system will ignore reorg
			// here, as long as the correct announcement is received, the status change
			// will be directly performed.
			//
			// In order to avoid the system error caused by ignoring reorg, when the
			// server side provides a stable checkpoint to the light client, it will
			// first query the contract to ensure that the checkpoint is indeed registered
			// on the main chain.
			//
			// If the checkpoint is not registered in the contract because of reorg,
			// the les server will choose older one instead of until it finds a checkpoint
			// that has already been registered.
			if !event.Raw.Removed && (checkpoint == nil || event.Index.Uint64() >= checkpoint.SectionIndex) {
				valid, signer := reg.verifySigner(event.CheckpointHash, event.Signature)
				if !valid {
					continue
				}
				logFn := log.Debug
				anno, exist := announcements[event.Index.Uint64()]
				if !exist || anno.hash != common.Hash(event.CheckpointHash) {
					logFn = log.Info
				}
				announcements[event.Index.Uint64()] = announce{common.Hash(event.CheckpointHash)}
				logFn("Receive new checkpoint event", "section", event.Index,
					"hash", common.Hash(event.CheckpointHash).Hex(), "signer", signer.Hex())
			}
		case head := <-headCh:
			number := head.Block.NumberU64()
			if number < reg.config.CheckpointSize+reg.config.FreezeThreshold {
				continue
			}
			begin := int64(-1)
			if checkpoint != nil {
				begin = int64(checkpoint.SectionIndex)
			}
			end := int64((number-reg.config.FreezeThreshold)/reg.config.CheckpointSize - 1)
			if end <= begin {
				continue
			}
			for index := end; index > begin; index -= 1 {
				anno, ok := announcements[uint64(index)]
				if !ok {
					continue
				}
				c := reg.getLocalCheckpoint(uint64(index))
				if c.HashEqual(common.Hash(anno.hash)) {
					light.WriteTrustedCheckpoint(reg.chaindb, c.SectionIndex, &c)
					light.WriteHeadCheckpoint(reg.chaindb, c.SectionIndex)
					checkpoint = &c
					announcements = make(map[uint64]announce)
					log.Info("Update stable checkpoint", "section", checkpoint.SectionIndex, "hash", checkpoint.Hash().Hex())
					break
				}
			}

		case <-ticker.C:
			// Evict useless announcement every 5 minutes.
			for idx := range announcements {
				if checkpoint != nil && checkpoint.SectionIndex >= idx {
					delete(announcements, idx)
				}
			}
		case <-reg.exitCh:
			// Les server is closed.
			return
		}
	}
}

// recoverCheckpoint filters checkpoint announcement events and recovers stable checkpoint.
func (reg *checkpointRegistrar) recoverCheckpoint() *light.TrustedCheckpoint {
	var (
		sectionCnt, _, _ = reg.bloomTrieIndexer.Sections()
		stable           = light.ReadTrustedCheckpoint(reg.chaindb, light.ReadHeadCheckpoint(reg.chaindb))
		headHash         = rawdb.ReadHeadHeaderHash(reg.chaindb)
		headNumber       = rawdb.ReadHeaderNumber(reg.chaindb, headHash)
	)
	// Short circuit if there is no local checkpoint generated.
	if headNumber == nil || sectionCnt == 0 {
		return nil
	}
	start := time.Now()
	index := sectionCnt - 1
	for stable == nil || stable.SectionIndex < index {
		if (index+1)*reg.config.CheckpointSize+reg.config.FreezeThreshold <= *headNumber {
			hash, height, err := reg.contract.Contract().GetCheckpoint(nil, big.NewInt(int64(index)))
			if err != nil {
				log.Warn("Get checkpoint from registrar contract failed", "err", err)
				goto next
			}
			// Checkpoint hasn't been registered
			if hash == [32]byte{} {
				goto next
			}
			// Verify whether there is a corresponding valid signature from trusted signer.
			var logs [][]*types.Log
			receipts := rawdb.ReadReceipts(reg.chaindb, rawdb.ReadCanonicalHash(reg.chaindb, height.Uint64()), height.Uint64())
			for _, receipt := range receipts {
				logs = append(logs, receipt.Logs)
			}
			res := reg.contract.LookupCheckpointEvent(logs, index, hash)
			var valid bool
			for _, log := range res {
				if v, _ := reg.verifySigner(hash, log.Signature); v {
					valid = true
					break
				}
			}
			if !valid {
				goto next
			}
			checkpoint := reg.getLocalCheckpoint(index)
			if checkpoint.HashEqual(common.Hash(hash)) {
				light.WriteTrustedCheckpoint(reg.chaindb, checkpoint.SectionIndex, &checkpoint)
				light.WriteHeadCheckpoint(reg.chaindb, checkpoint.SectionIndex)
				log.Info("Recover stable checkpoint", "index", checkpoint.SectionIndex, "hash", checkpoint.Hash().Hex(), "elapsed", common.PrettyDuration(time.Since(start)))
				return &checkpoint
			}
			log.Warn("Invalid checkpoint", "localhash", checkpoint.Hash(), "registered", common.Hash(hash))
		}
	next:
		if index == 0 {
			break
		}
		index -= 1
	}
	if stable == nil {
		log.Info("No stable checkpoint", "elapsed", common.PrettyDuration(time.Since(start)))
	} else {
		log.Info("Recover stable checkpoint", "index", stable.SectionIndex, "hash", stable.Hash().Hex(), "elapsed", common.PrettyDuration(time.Since(start)))
	}
	return stable
}

// latestLocalCheckpoint finds the common stored section index and returns a set of
// post-processed trie roots (CHT and BloomTrie) associated with
// the appropriate section index and head hash as a local checkpoint package.
//
// Note for cht, the section size in LES1 is 4K, so indexer still uses LES/1
// 4k section size for backwards server compatibility. For bloomTrie, the size
// of the section used for indexer is 32K.
func (reg *checkpointRegistrar) latestLocalCheckpoint() light.TrustedCheckpoint {
	chtCount, _, _ := reg.chtIndexer.Sections()
	bloomTrieCount, _, _ := reg.bloomTrieIndexer.Sections()
	count := chtCount / (reg.indexerConfig.PairChtSize / reg.indexerConfig.ChtSize)
	// Cap the section index if the two sections are not consistent.
	if count > bloomTrieCount {
		count = bloomTrieCount
	}
	if count == 0 {
		// No checkpoint information can be provided.
		return *light.EmptyCheckpoint
	}
	return reg.getLocalCheckpoint(count - 1)
}

// getLocalCheckpoint returns a set of post-processed trie roots (CHT and BloomTrie)
// associated with the appropriate head hash by specific section index.
//
// The returned checkpoint is only the checkpoint generated by the local indexers,
// not the stable checkpoint registered in the registrar contract.
func (reg *checkpointRegistrar) getLocalCheckpoint(index uint64) light.TrustedCheckpoint {
	// convert last LES/2 section index back to LES/1 index for chtIndexer.SectionHead
	latest := (index+1)*(reg.indexerConfig.PairChtSize/reg.indexerConfig.ChtSize) - 1
	sectionHead := reg.chtIndexer.SectionHead(latest)
	return light.TrustedCheckpoint{
		SectionIndex: index,
		SectionHead:  sectionHead,
		CHTRoot:      light.GetChtRoot(reg.chaindb, latest, sectionHead),
		BloomRoot:    light.GetBloomTrieRoot(reg.chaindb, index, sectionHead),
	}
}

// stableCheckpoint returns the stable checkpoint which generated by local indexers
// and announced by trusted admins.
//
// Stable checkpoints that have been persisted may be unregistered in the contract
// (blockchain reorg). Before returning to the stable checkpoint, it will first
// check with the contract whether the checkpoint has been registered or not.
func (reg *checkpointRegistrar) stableCheckpoint() (*light.TrustedCheckpoint, uint64) {
	latest := light.ReadHeadCheckpoint(reg.chaindb)
	index := latest
	for {
		if c := light.ReadTrustedCheckpoint(reg.chaindb, index); c != nil {
			hash, height, err := reg.contract.Contract().GetCheckpoint(nil, big.NewInt(int64(c.SectionIndex)))
			if err == nil && c.HashEqual(common.Hash(hash)) {
				return c, height.Uint64()
			}
		}
		if index == 0 {
			break
		}
		index -= 1
	}
	return nil, 0
}

// VerifySigner recovers the signer address according to the signature and
// checks whether it is one of the specified checkpoint signer.
func (reg *checkpointRegistrar) verifySigner(checkpointHash [32]byte, signature []byte) (bool, common.Address) {
	pubkey, err := crypto.Ecrecover(checkpointHash[:], signature)
	if err != nil {
		return false, common.Address{}
	}
	var signer common.Address
	copy(signer[:], crypto.Keccak256(pubkey[1:])[12:])

	for _, s := range reg.signers {
		if s == signer {
			return true, signer
		}
	}
	return false, common.Address{}
}
